{"ast":null,"code":"var _jsxFileName = \"/home/jmfatal/Documents/Websites/location-lookup/src/App.js\";\nimport React, { Component } from \"react\";\nimport GoogleMapsLoader from \"google-maps\";\nimport apiURL from \"../config/url\";\nimport Locate from \"../apps/Location\";\n\nconst $ = require(\"jquery\");\n\nconst axios = require(\"axios\");\n\nconst {\n  key\n} = require(\"../config/auth\");\n\nclass Location extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      time: \"\",\n      weather: \"\",\n      news: [],\n      keys: {},\n      map: {}\n    };\n\n    this.locate = async () => {\n      let area = $(\"#PSearch\").val(); // Global Variables\n\n      let map = this.state.map;\n      let thetime;\n      let ftime; //keys and urls\n\n      const googleKey = this.state.keys.google;\n      const timeKey = this.state.keys.time;\n      const newsKey = this.state.keys.news;\n      const weatherKey = this.state.keys.weather; //clear news\n\n      this.setState({\n        news: []\n      }); //* Google Api\n\n      let res = await axios.get(apiURL.google, {\n        params: {\n          address: area,\n          key: googleKey\n        }\n      });\n      let data = res.data;\n      let name;\n      name = data.results[0].address_components[0].long_name;\n      const arealat = data.results[0].geometry.location.lat;\n      const arealing = data.results[0].geometry.location.lng;\n      let zoom;\n      data.results[0].types[0] === \"locality\" ? zoom = 10 : zoom = 5;\n      GoogleMapsLoader.load(function (google) {\n        map.setCenter(new google.maps.LatLng(arealat, arealing));\n        map.setZoom(zoom);\n      }); //* Time Api\n\n      res = await axios.get(apiURL.time, {\n        params: {\n          format: \"json\",\n          by: \"position\",\n          lat: arealat,\n          lng: arealing,\n          key: timeKey\n        }\n      });\n      data = res.data;\n      thetime = data.formatted.split(\" \");\n      ftime = thetime[1];\n      this.setState({\n        time: ftime\n      }); //* Weather Api\n\n      res = await axios.get(apiURL.weather, {\n        params: {\n          q: name,\n          units: \"imperial\",\n          appid: weatherKey\n        }\n      });\n      data = res.data;\n      name = data.name;\n      let weather = data.weather[0].main;\n      let temp = Math.ceil(data.main.temp);\n      let wind = data.wind.speed;\n      this.setState(() => ({\n        weather: {\n          name,\n          weather,\n          temp,\n          wind\n        }\n      })); //* News Api\n\n      res = await axios.get(apiURL.news, {\n        params: {\n          q: name,\n          apiKey: newsKey,\n          pageSize: 6\n        }\n      });\n      let articles = res.data.articles;\n\n      if (articles.length < 0) {\n        alert(\"No News Found\");\n      } else {\n        articles.map(article => {\n          const date = article.publishedAt.split(\"T\");\n          return this.setState(prevState => ({\n            news: [...prevState.news, {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }]\n          }));\n        });\n      }\n\n      $(\"#PSearch\").val(\"\");\n    };\n  }\n\n  async componentDidMount() {\n    const res = await axios(\"/api\", {\n      headers: {\n        Authorization: key\n      }\n    });\n    this.setState({\n      keys: res.data\n    });\n    let gkey = this.state.keys.google; //* Google Maps\n\n    GoogleMapsLoader.KEY = gkey;\n    GoogleMapsLoader.VERSION = \"3.39\";\n    await GoogleMapsLoader.load(google => {\n      let options = {\n        center: {\n          lat: 40,\n          lng: -100\n        },\n        scrollwheel: false,\n        zoom: 5\n      };\n      this.setState({\n        map: new google.maps.Map(document.getElementById(\"map\"), options)\n      });\n    });\n  }\n\n  render() {\n    const {\n      time,\n      weather,\n      news\n    } = this.state;\n    return React.createElement(Locate, {\n      click: this.locate,\n      time: time,\n      weather: weather,\n      news: news,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Location;","map":{"version":3,"sources":["/home/jmfatal/Documents/Websites/location-lookup/src/App.js"],"names":["React","Component","GoogleMapsLoader","apiURL","Locate","$","require","axios","key","Location","state","time","weather","news","keys","map","locate","area","val","thetime","ftime","googleKey","google","timeKey","newsKey","weatherKey","setState","res","get","params","address","data","name","results","address_components","long_name","arealat","geometry","location","lat","arealing","lng","zoom","types","load","setCenter","maps","LatLng","setZoom","format","by","formatted","split","q","units","appid","main","temp","Math","ceil","wind","speed","apiKey","pageSize","articles","length","alert","article","date","publishedAt","prevState","title","url","snippet","description","img","urlToImage","source","published","componentDidMount","headers","Authorization","gkey","KEY","VERSION","options","center","scrollwheel","Map","document","getElementById","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport GoogleMapsLoader from \"google-maps\";\nimport apiURL from \"../config/url\";\nimport Locate from \"../apps/Location\";\nconst $ = require(\"jquery\");\nconst axios = require(\"axios\");\nconst { key } = require(\"../config/auth\");\nclass Location extends Component {\n  state = {\n    time: \"\",\n    weather: \"\",\n    news: [],\n    keys: {},\n    map: {}\n  };\n\n  async componentDidMount() {\n    const res = await axios(\"/api\", { headers: { Authorization: key } });\n    this.setState({ keys: res.data });\n    let gkey = this.state.keys.google;\n\n    //* Google Maps\n    GoogleMapsLoader.KEY = gkey;\n    GoogleMapsLoader.VERSION = \"3.39\";\n    await GoogleMapsLoader.load(google => {\n      let options = {\n        center: { lat: 40, lng: -100 },\n        scrollwheel: false,\n        zoom: 5\n      };\n\n      this.setState({\n        map: new google.maps.Map(document.getElementById(\"map\"), options)\n      });\n    });\n  }\n\n  locate = async () => {\n    let area = $(\"#PSearch\").val();\n    // Global Variables\n    let map = this.state.map;\n    let thetime;\n    let ftime;\n\n    //keys and urls\n    const googleKey = this.state.keys.google;\n    const timeKey = this.state.keys.time;\n    const newsKey = this.state.keys.news;\n    const weatherKey = this.state.keys.weather;\n    //clear news\n    this.setState({ news: [] });\n\n    //* Google Api\n\n    let res = await axios.get(apiURL.google, {\n      params: {\n        address: area,\n        key: googleKey\n      }\n    });\n    let data = res.data;\n    let name;\n    name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? (zoom = 10) : (zoom = 5);\n\n    GoogleMapsLoader.load(function(google) {\n      map.setCenter(new google.maps.LatLng(arealat, arealing));\n      map.setZoom(zoom);\n    });\n\n    //* Time Api\n    res = await axios.get(apiURL.time, {\n      params: {\n        format: \"json\",\n        by: \"position\",\n        lat: arealat,\n        lng: arealing,\n        key: timeKey\n      }\n    });\n    data = res.data;\n    thetime = data.formatted.split(\" \");\n    ftime = thetime[1];\n    this.setState({ time: ftime });\n\n    //* Weather Api\n    res = await axios.get(apiURL.weather, {\n      params: {\n        q: name,\n        units: \"imperial\",\n        appid: weatherKey\n      }\n    });\n    data = res.data;\n    name = data.name;\n\n    let weather = data.weather[0].main;\n    let temp = Math.ceil(data.main.temp);\n    let wind = data.wind.speed;\n    this.setState(() => ({ weather: { name, weather, temp, wind } }));\n    //* News Api\n    res = await axios.get(apiURL.news, {\n      params: {\n        q: name,\n        apiKey: newsKey,\n        pageSize: 6\n      }\n    });\n    let articles = res.data.articles;\n    if (articles.length < 0) {\n      alert(\"No News Found\");\n    } else {\n      articles.map(article => {\n        const date = article.publishedAt.split(\"T\");\n        return this.setState(prevState => ({\n          news: [\n            ...prevState.news,\n            {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }\n          ]\n        }));\n      });\n    }\n    $(\"#PSearch\").val(\"\");\n  };\n  render() {\n    const { time, weather, news } = this.state;\n    return (\n      <Locate click={this.locate} time={time} weather={weather} news={news} />\n    );\n  }\n}\nexport default Location;\n"]},"metadata":{},"sourceType":"module"}