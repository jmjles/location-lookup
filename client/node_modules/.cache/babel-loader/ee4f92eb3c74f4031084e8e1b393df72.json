{"ast":null,"code":"var _jsxFileName = \"/home/jmfatal/Documents/Websites/location-lookup/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport GoogleMapsLoader from \"google-maps\";\nimport apiURL from \"../config/url\";\nimport Locate from \"./components/Location\";\nimport axios from \"axios\";\nimport { key, url } from \"./misc/config\";\nexport default function App() {\n  const [time, setTime] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [news, setNews] = useState([]);\n  const [area, setArea] = useState(\"\");\n  useEffect(() => {\n    const loadmap = async () => {\n      GoogleMapsLoader.KEY = googleKey;\n      GoogleMapsLoader.VERSION = \"3.39\";\n      await GoogleMapsLoader.load(google => {\n        let options = {\n          center: {\n            lat: 40,\n            lng: -100\n          },\n          scrollwheel: false,\n          zoom: 5\n        };\n        new google.maps.Map(document.getElementById(\"map\"), options);\n      });\n    };\n\n    loadmap();\n  }, []);\n\n  const locate = async () => {\n    //* Google Api\n    const res = await axios.get(apiURL.google, {\n      params: {\n        address: area,\n        key: googleKey\n      }\n    });\n    let data = res.data;\n    let name;\n    name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? zoom = 10 : zoom = 5;\n    GoogleMapsLoader.load(function (google) {\n      map.setCenter(new google.maps.LatLng(arealat, arealing));\n      map.setZoom(zoom);\n    });\n  };\n\n  const getNews = async name => {\n    try {\n      //* News Api\n      const res = await axios(url.news, {\n        params: {\n          q: name,\n          apiKey: key.news,\n          pageSize: 6\n        }\n      });\n      let articles = res.data.articles;\n\n      if (articles.length < 0) {\n        alert(\"No News Found\");\n      } else {\n        articles.map(article => {\n          const date = article.publishedAt.split(\"T\");\n          setNews([...news, {\n            title: article.title,\n            url: article.url,\n            snippet: article.description,\n            img: article.urlToImage,\n            source: article.source.name,\n            published: date[0]\n          }]);\n        });\n      }\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getTime = async (arealat, arealing) => {\n    try {\n      //* Time Api\n      const res = await axios(url.time, {\n        params: {\n          format: \"json\",\n          by: \"position\",\n          lat: arealat,\n          lng: arealing,\n          key: key.time\n        }\n      });\n      const data = res.data;\n      const thetime = data.formatted.split(\" \")[1];\n      setTime(thetime);\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getWeather = async name => {\n    try {\n      //* Weather Api\n      const res = await axios(url.weather, {\n        params: {\n          q: name,\n          units: \"imperial\",\n          appid: key.weather\n        }\n      });\n      const data = res.data;\n      const place = data.name;\n      let weather = data.weather[0].main;\n      let temp = Math.ceil(data.main.temp);\n      let wind = data.wind.speed;\n      setWeather({\n        name: place,\n        weather,\n        temp,\n        wind\n      });\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  return React.createElement(Locate, {\n    click: this.locate,\n    time: time,\n    weather: weather,\n    news: news,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/jmfatal/Documents/Websites/location-lookup/src/App.js"],"names":["React","useState","useEffect","GoogleMapsLoader","apiURL","Locate","axios","key","url","App","time","setTime","weather","setWeather","news","setNews","area","setArea","loadmap","KEY","googleKey","VERSION","load","google","options","center","lat","lng","scrollwheel","zoom","maps","Map","document","getElementById","locate","res","get","params","address","data","name","results","address_components","long_name","arealat","geometry","location","arealing","types","map","setCenter","LatLng","setZoom","getNews","q","apiKey","pageSize","articles","length","alert","article","date","publishedAt","split","title","snippet","description","img","urlToImage","source","published","er","console","log","getTime","format","by","thetime","formatted","getWeather","units","appid","place","main","temp","Math","ceil","wind","speed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport GoogleMapsLoader from \"google-maps\";\nimport apiURL from \"../config/url\";\nimport Locate from \"./components/Location\";\nimport axios from \"axios\";\nimport { key, url } from \"./misc/config\";\nexport default function App() {\n  const [time, setTime] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [news, setNews] = useState([]);\n  const [area, setArea] = useState(\"\");\n\n  useEffect(() => {\n    const loadmap = async () => {\n      GoogleMapsLoader.KEY = googleKey;\n      GoogleMapsLoader.VERSION = \"3.39\";\n      await GoogleMapsLoader.load(google => {\n        let options = {\n          center: { lat: 40, lng: -100 },\n          scrollwheel: false,\n          zoom: 5\n        };\n        new google.maps.Map(document.getElementById(\"map\"), options);\n      });\n    };\n    loadmap();\n  }, []);\n\n  const locate = async () => {\n    //* Google Api\n    const res = await axios.get(apiURL.google, {\n      params: {\n        address: area,\n        key: googleKey\n      }\n    });\n    let data = res.data;\n    let name;\n    name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? (zoom = 10) : (zoom = 5);\n\n    GoogleMapsLoader.load(function(google) {\n      map.setCenter(new google.maps.LatLng(arealat, arealing));\n      map.setZoom(zoom);\n    });\n  };\n  const getNews = async name => {\n    try {\n      //* News Api\n      const res = await axios(url.news, {\n        params: {\n          q: name,\n          apiKey: key.news,\n          pageSize: 6\n        }\n      });\n      let articles = res.data.articles;\n      if (articles.length < 0) {\n        alert(\"No News Found\");\n      } else {\n        articles.map(article => {\n          const date = article.publishedAt.split(\"T\");\n          setNews([\n            ...news,\n            {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }\n          ]);\n        });\n      }\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getTime = async (arealat,arealing) => {\n    try {\n      //* Time Api\n      const res = await axios(url.time, {\n        params: {\n          format: \"json\",\n          by: \"position\",\n          lat: arealat,\n          lng: arealing,\n          key: key.time\n        }\n      });\n      const data = res.data;\n      const thetime = data.formatted.split(\" \")[1];\n      setTime(thetime)\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getWeather = async (name) => {\n    try {\n      //* Weather Api\n      const res = await axios(url.weather, {\n        params: {\n          q: name,\n          units: \"imperial\",\n          appid: key.weather\n        }\n      });\n      const data = res.data;\n      const place = data.name;\n\n      let weather = data.weather[0].main;\n      let temp = Math.ceil(data.main.temp);\n      let wind = data.wind.speed;\n      setWeather({name:place,weather,temp,wind})\n    } catch (er) {\n      console.log(er);\n    }\n  };\n  return (\n    <Locate click={this.locate} time={time} weather={weather} news={news} />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}