{"ast":null,"code":"import { url, key } from \"./config\";\n\nconst axios = require(\"axios\");\n\nexport const GetLocation = async ({\n  searchString,\n  setCenter,\n  setZoom\n}) => {\n  const area = searchString;\n  let res;\n\n  try {\n    //* Google Maps\n    res = await axios(url.google, {\n      params: {\n        address: area,\n        key: key.google\n      }\n    });\n  } catch (er) {\n    console.log(er);\n  }\n\n  let data = res.data;\n  const name = data.results[0].address_components[0].long_name;\n  const arealat = data.results[0].geometry.location.lat;\n  const arealing = data.results[0].geometry.location.lng;\n  data.results[0].types[0] === \"locality\" ? setZoom(10) : setZoom(5);\n  setCenter({\n    lat: arealat,\n    lng: arealing\n  });\n  getTimes(arealat, arealing);\n  getNews(name);\n  getWeather(name);\n};\n\nconst getTimes = async (arealat, arealing) => {\n  //* Time Api\n  const res = await axios.get(url.time, {\n    params: {\n      format: \"json\",\n      by: \"position\",\n      lat: arealat,\n      lng: arealing,\n      key: key.time\n    }\n  });\n  const data = res.data;\n  const thetime = data.formatted.split(\" \");\n  const ftime = thetime[1]; //Set Time\n  //this.setState({ time: ftime });\n};\n\nconst getNews = async name => {\n  //* News Api\n  try {\n    const res = await axios.get(url.news, {\n      params: {\n        q: name,\n        apiKey: key.news,\n        pageSize: 6\n      }\n    });\n    let articles = res.data.articles;\n\n    if (articles.length < 0) {\n      alert(\"No News Found\");\n    } else {\n      articles.map(article => {\n        const date = article.publishedAt.split(\"T\");\n        return this.setState(prevState => ({\n          news: [...prevState.news, {\n            title: article.title,\n            url: article.url,\n            snippet: article.description,\n            img: article.urlToImage,\n            source: article.source.name,\n            published: date[0]\n          }]\n        }));\n      });\n    }\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nconst getWeather = async location => {\n  try {\n    const res = await axios(url.weather, {\n      params: {\n        q: location,\n        units: \"imperial\",\n        appid: key.weather\n      }\n    });\n    const data = res.data;\n    const name = data.name;\n    const weather = data.weather[0].main;\n    const temp = Math.ceil(data.main.temp);\n    const wind = data.wind.speed; //Set The State\n    //this.setState(() => ({ weather: { name, weather, temp, wind } }));\n  } catch (er) {\n    console.log(er);\n  }\n};","map":{"version":3,"sources":["/home/jmfatal/Documents/Websites/location-lookup/src/misc/GetLocation.js"],"names":["url","key","axios","require","GetLocation","searchString","setCenter","setZoom","area","res","google","params","address","er","console","log","data","name","results","address_components","long_name","arealat","geometry","location","lat","arealing","lng","types","getTimes","getNews","getWeather","get","time","format","by","thetime","formatted","split","ftime","news","q","apiKey","pageSize","articles","length","alert","map","article","date","publishedAt","setState","prevState","title","snippet","description","img","urlToImage","source","published","weather","units","appid","main","temp","Math","ceil","wind","speed"],"mappings":"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","sourcesContent":["import { url, key } from \"./config\";\nconst axios = require(\"axios\");\nexport const GetLocation = async ({ searchString, setCenter, setZoom }) => {\n  const area = searchString;\n  let res\n  try {\n    //* Google Maps\n    res = await axios(url.google, {\n      params: {\n        address: area,\n        key: key.google\n      }\n    });\n  } catch (er) {\n    console.log(er);\n  }\n  let data = res.data;\n  const name = data.results[0].address_components[0].long_name;\n  const arealat = data.results[0].geometry.location.lat;\n  const arealing = data.results[0].geometry.location.lng;\n\n  data.results[0].types[0] === \"locality\" ? setZoom(10) : setZoom(5);\n  setCenter({ lat: arealat, lng: arealing });\n  getTimes(arealat, arealing);\n  getNews(name);\n  getWeather(name);\n};\nconst getTimes = async (arealat, arealing) => {\n  //* Time Api\n  const res = await axios.get(url.time, {\n    params: {\n      format: \"json\",\n      by: \"position\",\n      lat: arealat,\n      lng: arealing,\n      key: key.time\n    }\n  });\n\n  const data = res.data;\n  const thetime = data.formatted.split(\" \");\n  const ftime = thetime[1];\n  //Set Time\n  //this.setState({ time: ftime });\n};\n\nconst getNews = async name => {\n  //* News Api\n  try {\n    const res = await axios.get(url.news, {\n      params: {\n        q: name,\n        apiKey: key.news,\n        pageSize: 6\n      }\n    });\n    let articles = res.data.articles;\n    if (articles.length < 0) {\n      alert(\"No News Found\");\n    } else {\n      articles.map(article => {\n        const date = article.publishedAt.split(\"T\");\n        return this.setState(prevState => ({\n          news: [\n            ...prevState.news,\n            {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }\n          ]\n        }));\n      });\n    }\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nconst getWeather = async location => {\n  try {\n    const res = await axios(url.weather, {\n      params: {\n        q: location,\n        units: \"imperial\",\n        appid: key.weather\n      }\n    });\n    const data = res.data;\n    const name = data.name;\n\n    const weather = data.weather[0].main;\n    const temp = Math.ceil(data.main.temp);\n    const wind = data.wind.speed;\n    //Set The State\n    //this.setState(() => ({ weather: { name, weather, temp, wind } }));\n  } catch (er) {\n    console.log(er);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}