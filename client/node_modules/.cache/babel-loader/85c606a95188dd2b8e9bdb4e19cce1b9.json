{"ast":null,"code":"var _jsxFileName = \"/home/jmfatal/Documents/Websites/location-lookup/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { Loader, LoaderOptions } from \"google-maps\";\nimport Locate from \"./components/Location\";\nimport axios from \"axios\";\nimport { key, url } from \"./misc/config\";\nexport default function App() {\n  const [time, setTime] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [news, setNews] = useState([]);\n  const [area, setArea] = useState(\"\");\n  const [map, setMap] = useState('');\n  useEffect(() => {\n    const loadmap = async () => {\n      const loader = new Loader(key.google);\n      const google = await loader.load();\n      let options = {\n        center: {\n          lat: 40,\n          lng: -100\n        },\n        scrollwheel: false,\n        zoom: 5\n      };\n      setMap(new google.maps.Map(document.getElementById(\"map\"), options));\n    };\n\n    loadmap();\n  }, []);\n\n  const locate = async () => {\n    //* Google Api\n    const res = await axios(url.google, {\n      params: {\n        address: area,\n        key: key.google\n      }\n    });\n    const data = res.data;\n    const name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? zoom = 10 : zoom = 5;\n    map.setCenter(arealat, arealing);\n    map.setZoom(zoom);\n    getNews(name);\n    getTime(arealat, arealing);\n    getWeather(name);\n  };\n\n  const getNews = async name => {\n    try {\n      //* News Api\n      const res = await axios(url.news, {\n        params: {\n          q: name,\n          apiKey: key.news,\n          pageSize: 6\n        }\n      });\n      let articles = res.data.articles;\n\n      if (articles.length < 0) {\n        alert(\"No News Found\");\n      } else {\n        articles.map(article => {\n          const date = article.publishedAt.split(\"T\");\n          setNews([...news, {\n            title: article.title,\n            url: article.url,\n            snippet: article.description,\n            img: article.urlToImage,\n            source: article.source.name,\n            published: date[0]\n          }]);\n        });\n      }\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getTime = async (arealat, arealing) => {\n    try {\n      //* Time Api\n      const res = await axios(url.time, {\n        params: {\n          format: \"json\",\n          by: \"position\",\n          lat: arealat,\n          lng: arealing,\n          key: key.time\n        }\n      });\n      const data = res.data;\n      const thetime = data.formatted.split(\" \");\n      setTime(thetime[1]);\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getWeather = async name => {\n    try {\n      //* Weather Api\n      const res = await axios(url.weather, {\n        params: {\n          q: name,\n          units: \"imperial\",\n          appid: key.weather\n        }\n      });\n      const data = res.data;\n      const place = data.name;\n      let weather = data.weather[0].main;\n      let temp = Math.ceil(data.main.temp);\n      let wind = data.wind.speed;\n      setWeather({\n        name: place,\n        weather,\n        temp,\n        wind\n      });\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  return React.createElement(Locate, {\n    locate: locate,\n    area: [area, setArea],\n    time: time,\n    weather: weather,\n    news: news,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/jmfatal/Documents/Websites/location-lookup/src/App.js"],"names":["React","useState","useEffect","Loader","LoaderOptions","Locate","axios","key","url","App","time","setTime","weather","setWeather","news","setNews","area","setArea","map","setMap","loadmap","loader","google","load","options","center","lat","lng","scrollwheel","zoom","maps","Map","document","getElementById","locate","res","params","address","data","name","results","address_components","long_name","arealat","geometry","location","arealing","types","setCenter","setZoom","getNews","getTime","getWeather","q","apiKey","pageSize","articles","length","alert","article","date","publishedAt","split","title","snippet","description","img","urlToImage","source","published","er","console","log","format","by","thetime","formatted","units","appid","place","main","temp","Math","ceil","wind","speed"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Loader, LoaderOptions } from \"google-maps\";\nimport Locate from \"./components/Location\";\nimport axios from \"axios\";\nimport { key, url } from \"./misc/config\";\nexport default function App() {\n  const [time, setTime] = useState(\"\");\n  const [weather, setWeather] = useState(\"\");\n  const [news, setNews] = useState([]);\n  const [area, setArea] = useState(\"\");\n  const [map, setMap ]= useState('');\n  useEffect(() => {\n    const loadmap = async () => {\n      const loader = new Loader(key.google);\n      const google = await loader.load();\n\n      let options = {\n        center: { lat: 40, lng: -100 },\n        scrollwheel: false,\n        zoom: 5\n      };\n      setMap(new google.maps.Map(document.getElementById(\"map\"), options));\n    };\n    loadmap();\n  }, []);\n\n  const locate = async () => {\n    //* Google Api\n    const res = await axios(url.google, {\n      params: {\n        address: area,\n        key: key.google\n      }\n    });\n    const data = res.data;\n    const name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? (zoom = 10) : (zoom = 5);\n      map.setCenter(arealat, arealing);\n      map.setZoom(zoom);\n    getNews(name);\n    getTime(arealat, arealing);\n    getWeather(name);\n  };\n  const getNews = async name => {\n    try {\n      //* News Api\n      const res = await axios(url.news, {\n        params: {\n          q: name,\n          apiKey: key.news,\n          pageSize: 6\n        }\n      });\n      let articles = res.data.articles;\n      if (articles.length < 0) {\n        alert(\"No News Found\");\n      } else {\n        articles.map(article => {\n          const date = article.publishedAt.split(\"T\");\n          setNews([\n            ...news,\n            {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }\n          ]);\n        });\n      }\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getTime = async (arealat, arealing) => {\n    try {\n      //* Time Api\n      const res = await axios(url.time, {\n        params: {\n          format: \"json\",\n          by: \"position\",\n          lat: arealat,\n          lng: arealing,\n          key: key.time\n        }\n      });\n      const data = res.data;\n      const thetime = data.formatted.split(\" \");\n      setTime(thetime[1]);\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getWeather = async name => {\n    try {\n      //* Weather Api\n      const res = await axios(url.weather, {\n        params: {\n          q: name,\n          units: \"imperial\",\n          appid: key.weather\n        }\n      });\n      const data = res.data;\n      const place = data.name;\n\n      let weather = data.weather[0].main;\n      let temp = Math.ceil(data.main.temp);\n      let wind = data.wind.speed;\n      setWeather({ name: place, weather, temp, wind });\n    } catch (er) {\n      console.log(er);\n    }\n  };\n  return (\n    <Locate\n      locate={locate}\n      area={[area, setArea]}\n      time={time}\n      weather={weather}\n      news={news}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}