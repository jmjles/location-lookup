{"ast":null,"code":"var _jsxFileName = \"/home/jmfatal/Documents/Websites/location-lookup/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport GoogleMapsLoader from \"google-maps\";\nimport apiURL from \"../config/url\";\nimport Locate from \"./components/Location\";\nimport axios from \"axios\";\nimport { key } from './misc/config';\nexport default function App() {\n  const [time, setTime] = useState('');\n  const [weather, setWeather] = useState('');\n  const [news, setNews] = useState([]);\n  const [area, setArea] = useState('');\n  useEffect(() => {\n    const loadmap = async () => {\n      GoogleMapsLoader.KEY = googleKey;\n      GoogleMapsLoader.VERSION = \"3.39\";\n      await GoogleMapsLoader.load(google => {\n        let options = {\n          center: {\n            lat: 40,\n            lng: -100\n          },\n          scrollwheel: false,\n          zoom: 5\n        };\n        new google.maps.Map(document.getElementById(\"map\"), options);\n      });\n    };\n\n    loadmap();\n  }, []);\n\n  locate = async () => {\n    let area = $(\"#PSearch\").val(); // Global Variables\n\n    let map = this.state.map;\n    let thetime;\n    let ftime; //clear news\n\n    this.setState({\n      news: []\n    }); //* Google Api\n\n    let res = await axios.get(apiURL.google, {\n      params: {\n        address: area,\n        key: googleKey\n      }\n    });\n    let data = res.data;\n    let name;\n    name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? zoom = 10 : zoom = 5;\n    GoogleMapsLoader.load(function (google) {\n      map.setCenter(new google.maps.LatLng(arealat, arealing));\n      map.setZoom(zoom);\n    });\n  };\n\n  const getNews = async () => {\n    try {\n      //* News Api\n      res = await axios.get(apiURL.news, {\n        params: {\n          q: name,\n          apiKey: newsKey,\n          pageSize: 6\n        }\n      });\n      let articles = res.data.articles;\n\n      if (articles.length < 0) {\n        alert(\"No News Found\");\n      } else {\n        articles.map(article => {\n          const date = article.publishedAt.split(\"T\");\n          return this.setState(prevState => ({\n            news: [...prevState.news, {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }]\n          }));\n        });\n      }\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getTime = async () => {\n    try {\n      //* Time Api\n      res = await axios.get(apiURL.time, {\n        params: {\n          format: \"json\",\n          by: \"position\",\n          lat: arealat,\n          lng: arealing,\n          key: timeKey\n        }\n      });\n      data = res.data;\n      thetime = data.formatted.split(\" \");\n      ftime = thetime[1];\n      this.setState({\n        time: ftime\n      });\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  const getWeather = async () => {\n    try {\n      //* Weather Api\n      res = await axios.get(apiURL.weather, {\n        params: {\n          q: name,\n          units: \"imperial\",\n          appid: weatherKey\n        }\n      });\n      data = res.data;\n      name = data.name;\n      let weather = data.weather[0].main;\n      let temp = Math.ceil(data.main.temp);\n      let wind = data.wind.speed;\n      this.setState(() => ({\n        weather: {\n          name,\n          weather,\n          temp,\n          wind\n        }\n      }));\n    } catch (er) {\n      console.log(er);\n    }\n  };\n\n  return React.createElement(Locate, {\n    click: this.locate,\n    time: time,\n    weather: weather,\n    news: news,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/home/jmfatal/Documents/Websites/location-lookup/src/App.js"],"names":["React","useState","useEffect","GoogleMapsLoader","apiURL","Locate","axios","key","App","time","setTime","weather","setWeather","news","setNews","area","setArea","loadmap","KEY","googleKey","VERSION","load","google","options","center","lat","lng","scrollwheel","zoom","maps","Map","document","getElementById","locate","$","val","map","state","thetime","ftime","setState","res","get","params","address","data","name","results","address_components","long_name","arealat","geometry","location","arealing","types","setCenter","LatLng","setZoom","getNews","q","apiKey","newsKey","pageSize","articles","length","alert","article","date","publishedAt","split","prevState","title","url","snippet","description","img","urlToImage","source","published","er","console","log","getTime","format","by","timeKey","formatted","getWeather","units","appid","weatherKey","main","temp","Math","ceil","wind","speed"],"mappings":"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","sourcesContent":["import React, { useState,useEffect } from \"react\";\nimport GoogleMapsLoader from \"google-maps\";\nimport apiURL from \"../config/url\";\nimport Locate from \"./components/Location\";\nimport axios  from \"axios\";\nimport {key} from './misc/config';\nexport default function App() {\n   const [time,setTime] = useState('')\n   const [weather,setWeather] = useState('')\n   const [news,setNews] = useState([])\n   const [area,setArea] = useState('')\n\n   useEffect(()=>{\n     const loadmap = async () => {\n      GoogleMapsLoader.KEY = googleKey\n      GoogleMapsLoader.VERSION = \"3.39\"\n      await GoogleMapsLoader.load(google => {\n\n      let options = {\n        center: { lat: 40, lng: -100 },\n        scrollwheel: false,\n        zoom: 5\n      }\n      new google.maps.Map(document.getElementById(\"map\"), options)\n     })\n     }\n     loadmap();\n   },[])\n\n  locate = async () => {\n    let area = $(\"#PSearch\").val();\n    // Global Variables\n    let map = this.state.map;\n    let thetime;\n    let ftime;\n    //clear news\n    this.setState({ news: [] });\n\n    //* Google Api\n\n    let res = await axios.get(apiURL.google, {\n      params: {\n        address: area,\n        key: googleKey\n      }\n    });\n    let data = res.data;\n    let name;\n    name = data.results[0].address_components[0].long_name;\n    const arealat = data.results[0].geometry.location.lat;\n    const arealing = data.results[0].geometry.location.lng;\n\n    let zoom;\n    data.results[0].types[0] === \"locality\" ? (zoom = 10) : (zoom = 5);\n\n    GoogleMapsLoader.load(function(google) {\n      map.setCenter(new google.maps.LatLng(arealat, arealing));\n      map.setZoom(zoom);\n    });\n  };\n  const getNews = async () => {\n    try{\n//* News Api\n    res = await axios.get(apiURL.news, {\n      params: {\n        q: name,\n        apiKey: newsKey,\n        pageSize: 6\n      }\n    });\n    let articles = res.data.articles;\n    if (articles.length < 0) {\n      alert(\"No News Found\");\n    } else {\n      articles.map(article => {\n        const date = article.publishedAt.split(\"T\");\n        return this.setState(prevState => ({\n          news: [\n            ...prevState.news,\n            {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }\n          ]\n        }));\n      });\n    }\n    }catch(er){\n      console.log(er)\n    }\n  }\n  const getTime = async () => {\n    try{\n    //* Time Api\n    res = await axios.get(apiURL.time, {\n      params: {\n        format: \"json\",\n        by: \"position\",\n        lat: arealat,\n        lng: arealing,\n        key: timeKey\n      }\n    });\n    data = res.data;\n    thetime = data.formatted.split(\" \");\n    ftime = thetime[1];\n    this.setState({ time: ftime });\n    }catch(er){\n      console.log(er)\n    }\n  }\n  const getWeather = async () => {\n    try{\n    //* Weather Api\n    res = await axios.get(apiURL.weather, {\n      params: {\n        q: name,\n        units: \"imperial\",\n        appid: weatherKey\n      }\n    });\n    data = res.data;\n    name = data.name;\n\n    let weather = data.weather[0].main;\n    let temp = Math.ceil(data.main.temp);\n    let wind = data.wind.speed;\n    this.setState(() => ({ weather: { name, weather, temp, wind } }));\n    }catch(er){\n      console.log(er)\n    }\n  }\n  return (\n      <Locate click={this.locate} time={time} weather={weather} news={news} />\n  )\n}\n"]},"metadata":{},"sourceType":"module"}