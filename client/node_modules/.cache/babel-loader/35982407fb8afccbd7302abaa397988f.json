{"ast":null,"code":"import GoogleMapsLoader from \"google-maps\";\nimport { url } from \"./config\";\n\nconst axios = require(\"axios\");\n\nexport const GetLocation = async () => {\n  const area = document.getElementById(\"Search\");\n  console.log(area);\n  const timeKey = '';\n  const newsKey = '';\n  const weatherKey = ''; //* Google Api\n\n  let map = this.state.map;\n  let thetime;\n  let ftime;\n  let gkey = process.env.GOOGLE; //* Google Maps\n\n  GoogleMapsLoader.KEY = gkey;\n  GoogleMapsLoader.VERSION = \"3.39\";\n  await GoogleMapsLoader.load(google => {\n    let options = {\n      center: {\n        lat: 40,\n        lng: -100\n      },\n      scrollwheel: false,\n      zoom: 5\n    };\n    new google.maps.Map(document.getElementById(\"map\"), options);\n  }); //keys and urls\n\n  let res = await axios.get(url.google, {\n    params: {\n      address: area,\n      key: gkey\n    }\n  });\n  let data = res.data;\n  const name = data.results[0].address_components[0].long_name;\n  const arealat = data.results[0].geometry.location.lat;\n  const arealing = data.results[0].geometry.location.lng;\n  let zoom;\n  data.results[0].types[0] === \"locality\" ? zoom = 10 : zoom = 5;\n  GoogleMapsLoader.load(function (google) {\n    map.setCenter(new google.maps.LatLng(arealat, arealing));\n    map.setZoom(zoom);\n  });\n  getTimes(arealat, arealing);\n  getNews(name);\n};\n\nconst getTimes = async (arealat, arealing) => {\n  //* Time Api\n  const res = await axios.get(url.time, {\n    params: {\n      format: \"json\",\n      by: \"position\",\n      lat: arealat,\n      lng: arealing,\n      key: timeKey\n    }\n  });\n  const data = res.data;\n  const thetime = data.formatted.split(\" \");\n  const ftime = thetime[1]; //Set Time\n  //this.setState({ time: ftime });\n};\n\nconst getNews = async name => {\n  //* News Api\n  try {\n    const res = await axios.get(url.news, {\n      params: {\n        q: name,\n        apiKey: newsKey,\n        pageSize: 6\n      }\n    });\n    let articles = res.data.articles;\n\n    if (articles.length < 0) {\n      alert(\"No News Found\");\n    } else {\n      articles.map(article => {\n        const date = article.publishedAt.split(\"T\");\n        return this.setState(prevState => ({\n          news: [...prevState.news, {\n            title: article.title,\n            url: article.url,\n            snippet: article.description,\n            img: article.urlToImage,\n            source: article.source.name,\n            published: date[0]\n          }]\n        }));\n      });\n    }\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nconst getWeather = async () => {\n  try {\n    const res = await axios(url.weather, {\n      params: {\n        q: name,\n        units: \"imperial\",\n        appid: weatherKey\n      }\n    });\n    const data = res.data;\n    const name = data.name;\n    const weather = data.weather[0].main;\n    const temp = Math.ceil(data.main.temp);\n    const wind = data.wind.speed; //Set The State\n    //this.setState(() => ({ weather: { name, weather, temp, wind } }));\n  } catch (er) {\n    console.log(er);\n  }\n};","map":{"version":3,"sources":["/home/jmfatal/Documents/Websites/location-lookup/src/misc/GetLocation.js"],"names":["GoogleMapsLoader","url","axios","require","GetLocation","area","document","getElementById","console","log","timeKey","newsKey","weatherKey","map","state","thetime","ftime","gkey","process","env","GOOGLE","KEY","VERSION","load","google","options","center","lat","lng","scrollwheel","zoom","maps","Map","res","get","params","address","key","data","name","results","address_components","long_name","arealat","geometry","location","arealing","types","setCenter","LatLng","setZoom","getTimes","getNews","time","format","by","formatted","split","news","q","apiKey","pageSize","articles","length","alert","article","date","publishedAt","setState","prevState","title","snippet","description","img","urlToImage","source","published","er","getWeather","weather","units","appid","main","temp","Math","ceil","wind","speed"],"mappings":"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","sourcesContent":["import GoogleMapsLoader from \"google-maps\";\nimport {url} from \"./config\";\nconst axios = require(\"axios\");\nexport const GetLocation = async () => {\n  const area = document.getElementById(\"Search\");\n  console.log(area);\n    const timeKey = ''\n    const newsKey = ''\n    const weatherKey =''\n  //* Google Api\n  let map = this.state.map;\n  let thetime;\n  let ftime;\n\n  let gkey = process.env.GOOGLE;\n\n  //* Google Maps\n  GoogleMapsLoader.KEY = gkey;\n  GoogleMapsLoader.VERSION = \"3.39\";\n  await GoogleMapsLoader.load(google => {\n    let options = {\n      center: { lat: 40, lng: -100 },\n      scrollwheel: false,\n      zoom: 5\n    };\n    new google.maps.Map(document.getElementById(\"map\"), options)\n  });\n\n  //keys and urls\n  let res = await axios.get(url.google, {\n    params: {\n      address: area,\n      key: gkey\n    }\n  });\n  let data = res.data;\n  const name = data.results[0].address_components[0].long_name;\n  const arealat = data.results[0].geometry.location.lat;\n  const arealing = data.results[0].geometry.location.lng;\n\n  let zoom;\n  data.results[0].types[0] === \"locality\" ? (zoom = 10) : (zoom = 5);\n\n  GoogleMapsLoader.load(function(google) {\n    map.setCenter(new google.maps.LatLng(arealat, arealing));\n    map.setZoom(zoom);\n  });\n  getTimes(arealat,arealing)\n  getNews(name)\n};\n\nconst getTimes = async (arealat, arealing) => {\n  //* Time Api\n  const res = await axios.get(url.time, {\n    params: {\n      format: \"json\",\n      by: \"position\",\n      lat: arealat,\n      lng: arealing,\n      key: timeKey\n    }\n  });\n\n  const data = res.data;\n  const thetime = data.formatted.split(\" \");\n  const ftime = thetime[1];\n  //Set Time\n  //this.setState({ time: ftime });\n};\n\nconst getNews = async name => {\n  //* News Api\n  try {\n    const res = await axios.get(url.news, {\n      params: {\n        q: name,\n        apiKey: newsKey,\n        pageSize: 6\n      }\n    });\n    let articles = res.data.articles;\n    if (articles.length < 0) {\n      alert(\"No News Found\");\n    } else {\n      articles.map(article => {\n        const date = article.publishedAt.split(\"T\");\n        return this.setState(prevState => ({\n          news: [\n            ...prevState.news,\n            {\n              title: article.title,\n              url: article.url,\n              snippet: article.description,\n              img: article.urlToImage,\n              source: article.source.name,\n              published: date[0]\n            }\n          ]\n        }));\n      });\n    }\n  } catch (er) {\n    console.log(er);\n  }\n};\n\nconst getWeather = async () => {\n  try {\n    const res = await axios(url.weather, {\n      params: {\n        q: name,\n        units: \"imperial\",\n        appid: weatherKey\n      }\n    });\n    const data = res.data;\n    const name = data.name;\n\n    const weather = data.weather[0].main;\n    const temp = Math.ceil(data.main.temp);\n    const wind = data.wind.speed;\n    //Set The State\n    //this.setState(() => ({ weather: { name, weather, temp, wind } }));\n  } catch (er) {\n    console.log(er);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}